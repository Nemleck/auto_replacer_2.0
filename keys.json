{
    "global_params": {
        "max_keys": 50,
        "debug": true,
        "default_config_params": {
            "keep_text": false,
            "case_sensitive": true,
            "separator": null,
            "operation": null,
            "condition": null,
            "repeat_output": 1
        },
        "default_condition_params": {
            "elements": [],
            "mode": "=",
            "success_text": null,
            "failure_text": null,
            "operation_result_name": null,
            "test_if_previous_test_was": null
        }
    },
    
    "special_keys": {
        "end": "²end",
        "reload": "²r",
        "on": "²on",
        "off": "²off",
        "hey": "²hey",
        "clear": "²clear"
    },

    "external_keys": [],

    "keys": [
        {
            "input": "²sent1",
            "output": "This is an example of registered sentences !",
            "params": {
                "case_sensitive": false
            }
        },
        {
            "input": "²like{food}",
            "output": "It seems that you like {food}",
            "params": {
                "separator": "{}"
            }
        },
        {
            "input": "²search{theme}",
            "output": "Voici ce que j'ai trouvé sur le wiki à propos de {theme} : {part1} {part2} ",
            "params": {
                "separator": "{}",
                "operation": {
                    "result": "get_wiki_info('{theme}')",
                    "part1": "{result}[0]",
                    "part2": "{result}[1]"
                }
            }
        },
        {
            "input": "²select_all",
            "output": ["ctrl", "a", "c"]
        },
        {
            "input": ["esc"],
            "output": "echapped !"
        },
        {
            "input": "²calc(op)",
            "output": "(op) = (result)",
            "params": {
                "separator": "()",
                "operation": {
                    "result": "(op)"
                }
            }
        },
        {
            "input": "²configs",
            "output": "1result2",
            "params": {
                "separator": "12",
                "operation": {
                    "result": "self.get_stringed_configs()"
                }
            }
        },
        {
            "input": "²write_from{start}_to{end}",
            "output": "{result}",
            "params": {
                "separator": "{}",
                "operation": {
                    "result": "list(range({start},{end}+1))"
                }
            }
        },
        {
            "input": "²get{latex_char}",
            "output": "{unicode_char}",
            "params": {
                "separator": "{}",
                "operation": {
                    "unicode_char": "latex.convert(r'{latex_char}')"
                }
            }
        },
        {
            "input": "²say_hello{agreement}",
            "output": "{result}",
            "params": {
                "separator": "{}",
                "operation": {
                    "low_agr": "'{agreement}'.lower()[0]"
                },
                "condition": [
                    {
                        "elements": ["{low_agr}", "y"],
                        "mode": "=",
                        "success_text": "You said {agreement}, yay ! -> Hello !",
                        "failure_text": "You don't agree...",
                        "operation_result_name": "result"
                    }
                ],
                "repeat_output": 1
            }
        },
        {
            "input": "N_ou_R{oper}",
            "output": "{oper} is {math_result}, {test_result}",
            "params": {
                "separator": "{}",
                "operation": {
                    "math_result": "{oper}",
                    "rounded": "round({math_result})"
                },
                "condition": [
                    {
                        "elements": ["{math_result}", "{rounded}"],
                        "mode": "=",
                        "success_text": "and it belongs to Z !",
                        "failure_text": "and it doesn't belong to N...",
                        "operation_result_name": "test_result"
                    }
                ]
            }
        },
        {
            "input": "big_or_small{num1}{num2}",
            "output": "{num1} is {result} {num2}",
            "params": {
                "separator": "{}",
                "condition": [
                    {
                        "elements": ["{num1}", "{num2}"],
                        "mode": ">",
                        "success_text": "bigger than",
                        "failure_text": "smaller than",
                        "operation_result_name": "result"
                    },
                    {
                        "elements": ["{num1}", "{num2}"],
                        "mode": "=",
                        "success_text": "the same as",
                        "operation_result_name": "result",
                        "test_if_previous_test_was": false
                    }
                ]
            }
        }
    ]
}